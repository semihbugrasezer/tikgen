#!/usr/bin/env python3
"""
Dependencies setup script for AutoPinner Pro.
This script helps users install the required dependencies.
"""

import os
import sys
import logging
import subprocess
from pathlib import Path
from typing import List, Dict, Optional

# Configure logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# Required dependencies
REQUIRED_PACKAGES = {
    "PyQt5": "PyQt5>=5.15.0",
    "openai": "openai>=1.0.0",
    "pinterest-api": "pinterest-api>=1.0.0",
    "SQLAlchemy": "SQLAlchemy>=2.0.0",
    "python-dotenv": "python-dotenv>=1.0.0",
    "requests": "requests>=2.31.0",
    "pillow": "Pillow>=10.0.0",
    "pandas": "pandas>=2.0.0",
    "numpy": "numpy>=1.24.0",
    "matplotlib": "matplotlib>=3.7.0",
    "seaborn": "seaborn>=0.12.0",
    "scikit-learn": "scikit-learn>=1.3.0",
    "nltk": "nltk>=3.8.0",
    "python-dateutil": "python-dateutil>=2.8.0",
    "tqdm": "tqdm>=4.65.0",
    "colorama": "colorama>=0.4.6",
    "rich": "rich>=13.0.0",
    "python-wordpress-xmlrpc": "python-wordpress-xmlrpc>=2.3",
    "psutil": "psutil>=5.9.0",
}


def check_python_version() -> bool:
    """Check if Python version meets requirements."""
    required_version = (3, 8)
    current_version = sys.version_info[:2]

    if current_version < required_version:
        logger.error(
            f"Python {required_version[0]}.{required_version[1]} or higher is required."
        )
        logger.error(f"Current version: {current_version[0]}.{current_version[1]}")
        return False

    return True


def check_pip() -> bool:
    """Check if pip is installed and up to date."""
    try:
        subprocess.run(
            [sys.executable, "-m", "pip", "--version"], check=True, capture_output=True
        )
        return True
    except subprocess.CalledProcessError:
        logger.error("pip is not installed or not working properly.")
        return False


def upgrade_pip():
    """Upgrade pip to the latest version."""
    try:
        logger.info("Upgrading pip...")
        subprocess.run(
            [sys.executable, "-m", "pip", "install", "--upgrade", "pip"],
            check=True,
            capture_output=True,
        )
        logger.info("pip upgraded successfully.")
    except subprocess.CalledProcessError as e:
        logger.error(f"Failed to upgrade pip: {e}")
        sys.exit(1)


def install_package(package: str, version: str) -> bool:
    """Install a single package."""
    try:
        logger.info(f"Installing {package}...")
        subprocess.run(
            [sys.executable, "-m", "pip", "install", version],
            check=True,
            capture_output=True,
        )
        logger.info(f"{package} installed successfully.")
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"Failed to install {package}: {e}")
        return False


def install_dependencies():
    """Install all required dependencies."""
    success_count = 0
    fail_count = 0

    for package, version in REQUIRED_PACKAGES.items():
        if install_package(package, version):
            success_count += 1
        else:
            fail_count += 1

    return success_count, fail_count


def create_requirements_file():
    """Create requirements.txt file."""
    requirements_path = Path(__file__).parent.parent / "requirements.txt"

    with open(requirements_path, "w") as f:
        f.write("# AutoPinner Pro Dependencies\n")
        f.write("# Generated by setup_dependencies.py\n\n")

        for version in REQUIRED_PACKAGES.values():
            f.write(f"{version}\n")

    logger.info(f"Requirements file created at {requirements_path}")


def main():
    """Main function to set up dependencies."""
    try:
        # Check Python version
        if not check_python_version():
            return 1

        # Check pip
        if not check_pip():
            return 1

        # Upgrade pip
        upgrade_pip()

        # Install dependencies
        logger.info("\nInstalling dependencies...")
        success_count, fail_count = install_dependencies()

        # Create requirements.txt
        create_requirements_file()

        # Report results
        total = len(REQUIRED_PACKAGES)
        logger.info(f"\nInstallation completed:")
        logger.info(f"  ✓ Successfully installed: {success_count}/{total}")
        if fail_count > 0:
            logger.error(f"  ✗ Failed to install: {fail_count}/{total}")
            return 1

        logger.info("\nAll dependencies installed successfully!")
        return 0

    except KeyboardInterrupt:
        logger.info("\nInstallation cancelled by user.")
        return 1
    except Exception as e:
        logger.error(f"\nAn error occurred: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())
