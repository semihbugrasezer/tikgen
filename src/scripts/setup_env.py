#!/usr/bin/env python3
"""
Environment setup script for AutoPinner Pro.
This script helps users set up their environment variables.
"""

import os
import sys
import logging
import getpass
from pathlib import Path
from typing import Dict, Optional

# Configure logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# Required environment variables
REQUIRED_ENV_VARS = {
    "OPENAI_API_KEY": {
        "description": "OpenAI API key for content generation",
        "secure": True,
    },
    "PINTEREST_ACCESS_TOKEN": {
        "description": "Pinterest access token for API access",
        "secure": True,
    },
    "PINTEREST_APP_ID": {"description": "Pinterest application ID", "secure": False},
    "PINTEREST_APP_SECRET": {
        "description": "Pinterest application secret",
        "secure": True,
    },
    "DATABASE_URL": {
        "description": "Database connection URL (e.g., sqlite:///autopinner.db)",
        "secure": False,
    },
}


def get_env_value(var_name: str, description: str, secure: bool) -> Optional[str]:
    """Get environment variable value from user input."""
    current_value = os.getenv(var_name)

    if current_value:
        masked_value = "*" * len(current_value) if secure else current_value
        logger.info(f"\nCurrent value for {var_name}: {masked_value}")
        response = input(f"Would you like to update {var_name}? (y/N): ").lower()
        if response != "y":
            return current_value

    while True:
        if secure:
            value = getpass.getpass(f"Enter {description}: ")
        else:
            value = input(f"Enter {description}: ")

        if value.strip():
            return value.strip()
        logger.warning("Value cannot be empty. Please try again.")


def load_env_file() -> Dict[str, str]:
    """Load existing environment variables from .env file."""
    env_vars = {}
    env_path = Path(__file__).parent.parent / ".env"

    if env_path.exists():
        with open(env_path) as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith("#"):
                    key, value = line.split("=", 1)
                    env_vars[key.strip()] = value.strip()

    return env_vars


def save_env_file(env_vars: Dict[str, str]):
    """Save environment variables to .env file."""
    env_path = Path(__file__).parent.parent / ".env"

    with open(env_path, "w") as f:
        f.write("# AutoPinner Pro Environment Variables\n")
        f.write("# Generated by setup_env.py\n\n")

        for key, value in env_vars.items():
            f.write(f"{key}={value}\n")

    logger.info(f"Environment variables saved to {env_path}")


def setup_environment():
    """Set up environment variables."""
    # Load existing variables
    env_vars = load_env_file()

    # Get values for each required variable
    for var_name, info in REQUIRED_ENV_VARS.items():
        if var_name not in env_vars:
            value = get_env_value(var_name, info["description"], info["secure"])
            if value:
                env_vars[var_name] = value

    # Save to .env file
    save_env_file(env_vars)

    # Verify all required variables are set
    missing_vars = []
    for var_name in REQUIRED_ENV_VARS:
        if var_name not in env_vars:
            missing_vars.append(var_name)

    if missing_vars:
        logger.error("\nMissing required environment variables:")
        for var_name in missing_vars:
            logger.error(f"  - {var_name}")
        return False

    return True


def main():
    """Main function to set up environment."""
    try:
        logger.info("Setting up environment variables...")

        if setup_environment():
            logger.info("\nEnvironment setup completed successfully!")
            return 0
        else:
            logger.error("\nEnvironment setup failed. Please try again.")
            return 1

    except KeyboardInterrupt:
        logger.info("\nSetup cancelled by user.")
        return 1
    except Exception as e:
        logger.error(f"\nAn error occurred: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())
